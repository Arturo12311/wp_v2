Opcode: ConvenienceOptionInfo
Field: PartyAutoCreationAutoApprovalJoinApplication
Code:
pcVar12 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x41) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar12 = local_188;
  }
  std::__ndk1::__pu

Opcode: ConvenienceOptionInfo
Field: CovenantInvitable
Code:
pcVar12 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x43) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar12;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: ConvenienceOptionInfo
Field: IsChatCurrencySpendWarned
Code:
lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x44) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar12 = local_188;
  }
  std::__ndk1::__p

Opcode: ConvenienceOptionInfo
Field: SomaItemUsePopupDisplayOption
Code:
pcVar12 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x45) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar12;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: ConvenienceOptionInfo
Field: DeathPenaltyAutoRecoveryOption
Code:
lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x46) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar12 = local_188;
  }
  std::__ndk1::__p

Opcode: ConvenienceOptionInfo
Field: GearEnhancementErodeNotifyDisplayOption
Code:
pcVar12 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x4c) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar12;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: ConvenienceOptionInfo
Field: GearEnhancementDestroyNotifyDisplayOption
Code:
lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x4d) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar12 = local_188;
  }
  std::__ndk1::__p

Opcode: ConvenienceOptionInfo
Field: ErodedRestoreScrollUseNotifyDisplayOption
Code:
lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x4f) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar12 = local_188;
  }
  std::__ndk1::__p

Opcode: ConvenienceOptionInfo
Field: NpcListAutoExpandAndCollapse
Code:
pcVar12 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x50) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar12;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: CovenantPermissionsInfo
Field: CanManageCovenantMember
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 9) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: CovenantPermissionsInfo
Field: CanBanishMember
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 10) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar10;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: CovenantPermissionsInfo
Field: CanManageHaven
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0xb) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: CovenantPermissionsInfo
Field: CanModifyTax
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0xc) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar10;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: CovenantPermissionsInfo
Field: CanManageDiplomacy
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0xd) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: CovenantPermissionsInfo
Field: CanManageDiplomacyChat
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0xe) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar10;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: CovenantPermissionsInfo
Field: CanDeclareBattle
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0xf) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: CovenantPermissionsInfo
Field: CanStartCampaign
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x10) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__pu

Opcode: CheatRegisterCheatEnabledPlayerNameResponse
Field: CheatEnabledPlayerNames
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<FString,DefaultKeyFuncs<FString,false>,FDefaultSetAllocator>,void>::Serialize
            ((TSet *)(in_x0 + 0x10));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: RPCExceptionMessage
Field: ErrorString
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize((JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
               *)(in_x0 + 0x10),(basic_string *)pcVar7);
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar7 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar7 = local_188;
  }
  std::__ndk

Opcode: ChatOptionInfo
Field: CovenantRewardAcquireNotifyDisplayOption
Code:
pcVar9 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x1b) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar9,puVar3,lVar2,0x17);
  pcVar9[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar9;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: AutoDonateSettingOptionInfo
Field: IsContainEnchantedItem
Code:
pcVar9 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x59) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar9,puVar3,lVar2,0x17);
  pcVar9[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar9;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: AutoDonateSettingOptionInfo
Field: IsContainBasicCollectableItem
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x5a) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar9,puVar3,lVar2,0x17);
  pcVar9[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar9 = local_188;
  }
  std::__ndk1::__p

Opcode: ContentsRelockNotify
Field: ContentsUnlockKinds
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<ETzContentsUnlockKindType,DefaultKeyFuncs<ETzContentsUnlockKindType,false>,FDefaultSetAllocator>,void>
  ::Serialize((TSet *)(in_x0 + 8));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: TozTimeAdjustment
Field: Adjustment
Code:
TozSerializableMessageLibNative::JsonSerializer<TozSerializableMessageLibNative::TimeSpan,void>::
  Serialize((TimeSpan *)(in_x0 + 8));
  uVar4 = (ulong)(local_198[0] >> 1);
  pcVar6 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__n

Opcode: MountRendezvousInfo
Field: IsImmediateBoarding
Code:
lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 100) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar8;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar10,puVar2,lVar1,0x17);
  pcVar10[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: MountRendezvousInfo
Field: IsMovingBoarding
Code:
pcVar9 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x65) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar8;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar9,puVar2,lVar1,0x17);
  pcVar9[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  pcVar8 = pcVar9;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar8 = local_188;
  }
  std::__ndk1::__put

Opcode: NameTagHealthBarDisplayOptionDetailInfo
Field: IsOwnCovenantNameDisplayed
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 9) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: NameTagHealthBarDisplayOptionDetailInfo
Field: IsOwnHealthBarDisplayed
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 10) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar10;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: NameTagHealthBarDisplayOptionDetailInfo
Field: IsOtherCovenantNameDisplayed
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0xb) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: NameTagHealthBarDisplayOptionDetailInfo
Field: IsSameCovenantHealthBarDisplayed
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0xc) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar10;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: NameTagHealthBarDisplayOptionDetailInfo
Field: IsSamePartyOrBattalionHealthBarDisplayed
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0xd) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: TozPong
Field: ServerUtcNow
Code:
TozSerializableMessageLibNative::JsonSerializer<TozSerializableMessageLibNative::DateTime,void>::
  Serialize((DateTime *)(in_x0 + 0x10));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__n

Opcode: CovenantDiplomacySummaryInfo
Field: AllianceCovenantGuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<long_long,DefaultKeyFuncs<long_long,false>,FDefaultSetAllocator>,void>::
  Serialize((TSet *)(in_x0 + 8));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: CovenantDiplomacySummaryInfo
Field: HostilityCovenantGuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<long_long,DefaultKeyFuncs<long_long,false>,FDefaultSetAllocator>,void>::
  Serialize((TSet *)(in_x0 + 0x58));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: SpellstoneAdditionalBuffStatsInfo
Field: IsImmuneToHealthPointsGain
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x19) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: SpellstoneAdditionalBuffStatsInfo
Field: IsImmuneToManaPointsLoss
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x1a) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar10;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: SpellstoneAdditionalBuffStatsInfo
Field: IsImmuneToManaPointsGain
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x1b) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: ZlibCompressHandshakeResult
Field: TozNetwork.Handshake.Compressor.ZlibCompressHandshakeResult
Code:


Opcode: SchemaColumn
Field: DeployType
Code:
auVar11 = DatatoolReferenceNative::to_string(*(DeployType *)(in_x0 + 0x10));
  TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize(auVar11._0_8_,auVar11._8_8_);
  uVar3 = local_198 >> 1 & 0x7f;
  pcVar10 = (char *)((ulong)&local_198 | 1);
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk

Opcode: SchemaColumn
Field: DataType
Code:
auVar11 = DatatoolReferenceNative::to_string(*(DataType *)(in_x0 + 0x14));
  TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize(auVar11._0_8_,auVar11._8_8_);
  uVar3 = (ulong)((byte)local_198 >> 1);
  pcVar10 = (char *)((ulong)&local_198 | 1);
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk

Opcode: SchemaColumn
Field: Comment
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize((JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
               *)(in_x0 + 0x20),(basic_string *)pcVar9);
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar10 = local_188;
  }
  std::__nd

Opcode: SchemaColumn
Field: Name
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize((JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
               *)(in_x0 + 0x38),(basic_string *)pcVar10);
  uVar3 = local_198 >> 1 & 0x7f;
  pcVar10 = (char *)((ulong)&local_198 | 1);
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk

Opcode: BuffStatsInfo
Field: IsImmuneToHealthPointsGain
Code:
lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x15) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar11,puVar2,lVar1,0x17);
  pcVar11[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar11 = local_188;
  }
  std::__ndk1::__p

Opcode: BuffStatsInfo
Field: IsImmuneToManaPointsLoss
Code:
pcVar11 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x16) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar11,puVar2,lVar1,0x17);
  pcVar11[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar11;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: BuffStatsInfo
Field: IsImmuneToManaPointsGain
Code:
lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x17) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar11,puVar2,lVar1,0x17);
  pcVar11[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar11 = local_188;
  }
  std::__ndk1::__p

Opcode: TlsLikeEncryptPremasterSecret
Field: PremasterSecret
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::vector<unsigned_char,toz::DefaultAllocator<unsigned_char>>,void>::
  Serialize((vector *)(in_x0 + 8));
  uVar4 = (ulong)(local_198[0] >> 1);
  pcVar6 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__nd

Opcode: PlayerDeleteConditionCheckResponse
Field: IsInCovenant
Code:
pcVar9 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x19) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar9,puVar3,lVar2,0x17);
  pcVar9[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar9;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: PlayerDeleteConditionCheckResponse
Field: HasSaleGoodsInMarket
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x1a) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar9,puVar3,lVar2,0x17);
  pcVar9[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar9 = local_188;
  }
  std::__ndk1::__p

Opcode: SkillUseOptionInfo
Field: UseCycle
Code:
pcVar9 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x1b) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar9,puVar3,lVar2,0x17);
  pcVar9[lVar2] = '\0';
  uVar8 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar9;
  if ((local_198 & 1) != 0) {
    uVar8 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: SkillUseOptionInfo
Field: UseCycleInPvp
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x1c) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar9,puVar3,lVar2,0x17);
  pcVar9[lVar2] = '\0';
  uVar8 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar8 = local_190;
    pcVar9 = local_188;
  }
  std::__ndk1::__p

Opcode: TlsLikeEncryptClientHello
Field: unknown_name
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::vector<unsigned_char,toz::DefaultAllocator<unsigned_char>>,void>::
  Serialize((vector *)(in_x0 + 8));
  uVar4 = (ulong)(local_198[0] >> 1);
  pcVar6 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__nd

Opcode: TlsLikeEncryptServerCompleted
Field: TozNetwork.Handshake.TlsLikeEncryptor.TlsLikeEncryptServerCompleted
Code:


Opcode: SkillAffectTargetStatsAffectInfo
Field: IsBlocked
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x11) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar11,puVar3,lVar2,0x17);
  pcVar11[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar11 = local_188;
  }
  std::__ndk1::__p

Opcode: SkillAffectTargetStatsAffectInfo
Field: IsGlancingBlow
Code:
pcVar11 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x12) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar11,puVar3,lVar2,0x17);
  pcVar11[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar1 = pcVar11;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar1 = local_188;
  }
  std::__ndk1::__put

Opcode: AttackerListNotify
Field: AttackerPlayerGuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<long_long,DefaultKeyFuncs<long_long,false>,FDefaultSetAllocator>,void>::
  Serialize((TSet *)(in_x0 + 0x10));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: ContentsUnlockNotify
Field: ContentsUnlockKinds
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<ETzContentsUnlockKindType,DefaultKeyFuncs<ETzContentsUnlockKindType,false>,FDefaultSetAllocator>,void>
  ::Serialize((TSet *)(in_x0 + 8));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: CovenantRealmTransferCheckInfo
Field: HasRegisteredShopGoodsInGeneralShop
Code:
pcVar9 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x19) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar9,puVar3,lVar2,0x17);
  pcVar9[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar9;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: CovenantRealmTransferCheckInfo
Field: HasJoinedStrongholdBattle
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x1a) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar9,puVar3,lVar2,0x17);
  pcVar9[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar9 = local_188;
  }
  std::__ndk1::__p

Opcode: CovenantRealmTransferCheckInfo
Field: HasJoinedExpedition
Code:
pcVar9 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x1b) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar9,puVar3,lVar2,0x17);
  pcVar9[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar9 = local_188;
  }
  std::__ndk1::__pu

Opcode: MountBoardingInfo
Field: IsImmediateBoarding
Code:
pcVar9 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x34) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar9,puVar3,lVar2,0x17);
  pcVar9[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar9;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: MountBoardingInfo
Field: IsMovingBoarding
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x35) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar9,puVar3,lVar2,0x17);
  pcVar9[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar9 = local_188;
  }
  std::__ndk1::__p

Opcode: CheatCollectionUpdateNotify
Field: ActivatedCollectionCategoryCuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<FTzCuid,DefaultKeyFuncs<FTzCuid,false>,FDefaultSetAllocator>,void>::Serialize
            ((TSet *)(in_x0 + 0x18));
  uVar1 = local_198 >> 1 & 0x7f;
  pcVar3 = (char *)((ulong)&local_198 | 1);
  if ((local_198 & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: ServerDrivenPlayOptionInfo
Field: SwitchAtCurrentLocationInsideHuntingSite
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 9) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: ServerDrivenPlayOptionInfo
Field: AutoSwitchOnDisconnected
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0xb) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: ServerDrivenPlayOptionInfo
Field: UseAutoResupply
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x28) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar10;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: ServerDrivenPlayOptionInfo
Field: UseAutoResupplyWhenDead
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x30) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar10;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: ServerDrivenPlayOptionInfo
Field: UseHealthPointsRecovery
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x38) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar10;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: ServerDrivenPlayOptionInfo
Field: EndWhenDeadInPvp
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x39) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: TozTimeReconcile
Field: TozNetwork.Protocol.TozTimeReconcile
Code:


Opcode: SessionInitializeInfo
Field: unknown_name
Code:


Opcode: BattalionInfo
Field: AllianceCovenantGuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<long_long,DefaultKeyFuncs<long_long,false>,FDefaultSetAllocator>,void>::
  Serialize((TSet *)(in_x0 + 0x28));
  uVar10 = local_198 >> 1 & 0x7f;
  pcVar11 = (char *)((ulong)&local_198 | 1);
  if ((local_198 & 1) != 0) {
    uVar10 = local_190;
    pcVar11 = local_188;
  }
  std::__nd

Opcode: BattalionInfo
Field: CovenantGrantedSkillCuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<FTzCuid,DefaultKeyFuncs<FTzCuid,false>,FDefaultSetAllocator>,void>::Serialize
            ((TSet *)(in_x0 + 0x78));
  uVar10 = local_198 >> 1 & 0x7f;
  pcVar11 = (char *)((ulong)&local_198 | 1);
  if ((local_198 & 1) != 0) {
    uVar10 = local_190;
    pcVar11 = local_188;
  }
  std::__nd

Opcode: ErServerSessionInitializeInfo
Field: __base__
Code:


Opcode: TlsLikeEncryptHandshakeResult
Field: TozNetwork.Handshake.TlsLikeEncryptor.TlsLikeEncryptHandshakeResult
Code:


Opcode: TlsLikeEncryptServerHello
Field: ServerRandom
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::vector<unsigned_char,toz::DefaultAllocator<unsigned_char>>,void>::
  Serialize((vector *)(in_x0 + 8));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: TlsLikeEncryptServerHello
Field: Exponent
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::vector<unsigned_char,toz::DefaultAllocator<unsigned_char>>,void>::
  Serialize((vector *)(in_x0 + 0x20));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: TlsLikeEncryptServerHello
Field: Modulus
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::vector<unsigned_char,toz::DefaultAllocator<unsigned_char>>,void>::
  Serialize((vector *)(in_x0 + 0x38));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: RPCCancellingMessage
Field: TozRPC.RPCCancellingMessage
Code:


Opcode: TozTcpHello
Field: EngineData
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::vector<unsigned_char,toz::DefaultAllocator<unsigned_char>>,void>::
  Serialize((vector *)(in_x0 + 8));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: TozTcpHello
Field: UserData
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::vector<unsigned_char,toz::DefaultAllocator<unsigned_char>>,void>::
  Serialize((vector *)(in_x0 + 0x20));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: NpcInfo
Field: AttackerPlayerGuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<long_long,DefaultKeyFuncs<long_long,false>,FDefaultSetAllocator>,void>::
  Serialize((TSet *)(in_x0 + 0x228));
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar12 = local_188;
  }
  std::__n

Opcode: TozMessage
Field: TozNetwork.Protocol.TozMessage
Code:


Opcode: DataTable
Field: RegDate
Code:
TozSerializableMessageLibNative::JsonSerializer<TozSerializableMessageLibNative::DateTime,void>::
  Serialize((DateTime *)(in_x0 + 0x18));
  uVar8 = local_198 >> 1 & 0x7f;
  pcVar3 = (char *)((ulong)&local_198 | 1);
  if ((local_198 & 1) != 0) {
    uVar8 = local_190;
    pcVar3 = local_188;
  }
  std::__n

Opcode: DataTable
Field: Rows
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::vector<std::__ndk1::vector<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,toz::DefaultAllocator<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>>>,toz::DefaultAllocator<std::__ndk1::vector<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,toz::DefaultAllocator<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>>>>>,void>
  ::Serialize((vector *)(in_x0 + 0x28));
  uVar8 = local_198 >> 1 & 0x7f;
  pcVar3 = (char *)((ulong)&local_198 | 1);
  if ((local_198 & 1) != 0) {
    uVar8 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: CharacterInfo
Field: BuffInfos
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<TSharedPtr<FTzBuffInfo,(ESPMode)1>,DefaultKeyFuncs<TSharedPtr<FTzBuffInfo,(ESPMode)1>,false>,FDefaultSetAllocator>,void>
  ::Serialize((TSet *)(in_x0 + 0xc0));
  uVar11 = local_198 >> 1 & 0x7f;
  pcVar9 = (char *)((ulong)&local_198 | 1);
  if ((local_198 & 1) != 0) {
    uVar11 = local_190;
    pcVar9 = local_188;
  }
  std::__nd

Opcode: CharacterInfo
Field: ParticipatingContentsGuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<long_long,DefaultKeyFuncs<long_long,false>,FDefaultSetAllocator>,void>::
  Serialize((TSet *)(in_x0 + 0x140));
  pcVar12 = (char *)((ulong)&local_198 | 1);
  uVar11 = local_198 >> 1 & 0x7f;
  pcVar9 = pcVar12;
  if ((local_198 & 1) != 0) {
    uVar11 = local_190;
    pcVar9 = local_188;
  }
  std::__ndk

Opcode: PlayerInfo
Field: IsFissioned
Code:
pcVar13 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x259) == '\0') {
    lVar1 = 5;
    puVar3 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar13,puVar3,lVar1,0x17);
  pcVar13[lVar1] = '\0';
  uVar12 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar12 = local_190;
    pcVar13 = local_188;
  }
  std::__ndk1::__pu

Opcode: PlayerInfo
Field: IsCollisionFree
Code:
lVar1 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x270) == '\0') {
    lVar1 = 5;
    puVar3 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar14,puVar3,lVar1,0x17);
  pcVar14[lVar1] = '\0';
  uVar12 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar12 = local_190;
    pcVar14 = local_188;
  }
  std::__ndk1::__p

Opcode: PlayerInfo
Field: IsQuestCinePlaying
Code:
pcVar13 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x271) == '\0') {
    lVar1 = 5;
    puVar3 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar13,puVar3,lVar1,0x17);
  pcVar13[lVar1] = '\0';
  uVar12 = local_198 >> 1 & 0x7f;
  pcVar14 = pcVar13;
  if ((local_198 & 1) != 0) {
    uVar12 = local_190;
    pcVar14 = local_188;
  }
  std::__ndk1::__put

Opcode: PlayerInfo
Field: IsHeadPieceDisplayed
Code:
lVar1 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x272) == '\0') {
    lVar1 = 5;
    puVar3 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar13,puVar3,lVar1,0x17);
  pcVar13[lVar1] = '\0';
  uVar12 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar12 = local_190;
    pcVar13 = local_188;
  }
  std::__ndk1::__p

Opcode: CrossRealmSeasonInfo
Field: MatchedRealmCuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<FTzCuid,DefaultKeyFuncs<FTzCuid,false>,FDefaultSetAllocator>,void>::Serialize
            ((TSet *)(in_x0 + 0x50));
  uVar3 = local_198 >> 1 & 0x7f;
  pcVar11 = (char *)((ulong)&local_198 | 1);
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar11 = local_188;
  }
  std::__nd

Opcode: CachedMessages
Field: Container
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::unordered_map<int,std::__ndk1::unique_ptr<TozNetworkNative::MessageCacheElement,std::__ndk1::default_delete<TozNetworkNative::MessageCacheElement>>,std::__ndk1::hash<int>,std::__ndk1::equal_to<int>,toz::DefaultAllocator<std::__ndk1::pair<int_const,std::__ndk1::unique_ptr<TozNetworkNative::MessageCacheElement,std::__ndk1::default_delete<TozNetworkNative::MessageCacheElement>>>>>,void>
  ::Serialize((unordered_map *)(in_x0 + 8));
  uVar4 = (ulong)(local_198[0] >> 1);
  pcVar6 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__nd

Opcode: BattalionOptionInfo
Field: IsAllowVolunteerJoinApply
Code:
pcVar12 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x22) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar12;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: BattalionOptionInfo
Field: IsVolunteerJoinApplicationAutomaticApproval
Code:
lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x23) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar12 = local_188;
  }
  std::__ndk1::__p

Opcode: BattalionOptionInfo
Field: IsNotExposeToBattalionList
Code:
pcVar12 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x24) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar12 = local_188;
  }
  std::__ndk1::__pu

Opcode: TerritoryErosionInitialDataNotify
Field: ErosionInfos
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<TSharedPtr<FTzErosionInfo,(ESPMode)1>,DefaultKeyFuncs<TSharedPtr<FTzErosionInfo,(ESPMode)1>,false>,FDefaultSetAllocator>,void>
  ::Serialize((TSet *)(in_x0 + 0x28));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: ServerGroupAuthenticateInfo
Field: __base__
Code:


Opcode: ServerGroupAuthenticateInfo
Field: Ip
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize((JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
               *)(in_x0 + 8),(basic_string *)pcVar7);
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar7 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar7 = local_188;
  }
  std::__ndk

Opcode: CheatDeregisterCheatEnabledPlayerNameResponse
Field: CheatEnabledPlayerNames
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<FString,DefaultKeyFuncs<FString,false>,FDefaultSetAllocator>,void>::Serialize
            ((TSet *)(in_x0 + 0x10));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: PlayerSummaryInfo
Field: IsInServerDrivenPlay
Code:
pcVar12 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x100) == '\0') {
    lVar1 = 5;
    puVar3 = (undefined8 *)pcVar9;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar3,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar11 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar11 = local_190;
    pcVar12 = local_188;
  }
  std::__ndk1::__pu

Opcode: PlayerSummaryInfo
Field: IsHeadPieceDisplayed
Code:
pcVar12 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x128) == '\0') {
    lVar1 = 5;
    puVar3 = (undefined8 *)pcVar9;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar3,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar11 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar11 = local_190;
    pcVar12 = local_188;
  }
  std::__ndk1::__pu

Opcode: ItemExpireNotify
Field: ExpiredItemCuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<FTzCuid,DefaultKeyFuncs<FTzCuid,false>,FDefaultSetAllocator>,void>::Serialize
            ((TSet *)(in_x0 + 8));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: BattalionCovenantGrantedSkillNotify
Field: CovenantGrantedSkillCuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<FTzCuid,DefaultKeyFuncs<FTzCuid,false>,FDefaultSetAllocator>,void>::Serialize
            ((TSet *)(in_x0 + 8));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: CampaignStartOptionInfo
Field: IsVolunteerJoinApplicationAutomaticApproval
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 9) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: CampaignStartOptionInfo
Field: IsNotExposeToBattalionList
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 10) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar10;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: CampaignStartOptionInfo
Field: IsBattalionAutoInviteCovenantMembers
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0xb) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: PlayerSkillInfo
Field: RootSkillCuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<FTzCuid,DefaultKeyFuncs<FTzCuid,false>,FDefaultSetAllocator>,void>::Serialize
            ((TSet *)(in_x0 + 8));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: PlayerSkillInfo
Field: SkillCuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<FTzCuid,DefaultKeyFuncs<FTzCuid,false>,FDefaultSetAllocator>,void>::Serialize
            ((TSet *)(in_x0 + 0x58));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: CheatGetCheatEnabledPlayerNamesResponse
Field: CheatEnabledPlayerNames
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<FString,DefaultKeyFuncs<FString,false>,FDefaultSetAllocator>,void>::Serialize
            ((TSet *)(in_x0 + 0x10));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: ProtocolCheckResponse
Field: TozNetwork.Handshake.ProtocolChecker.ProtocolCheckResponse
Code:


Opcode: CheatResetContentsUnlockResponse
Field: UnusedContentsUnlockKinds
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<ETzContentsUnlockKindType,DefaultKeyFuncs<ETzContentsUnlockKindType,false>,FDefaultSetAllocator>,void>
  ::Serialize((TSet *)(in_x0 + 0x10));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: MultipleHandshakeMessage
Field: HandshakeMessages
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::vector<std::__ndk1::unique_ptr<TozSerializableMessageLibNative::IMessage,std::__ndk1::default_delete<TozSerializableMessageLibNative::IMessage>>,toz::DefaultAllocator<std::__ndk1::unique_ptr<TozSerializableMessageLibNative::IMessage,std::__ndk1::default_delete<TozSerializableMessageLibNative::IMessage>>>>,void>
  ::Serialize((vector *)(in_x0 + 8));
  uVar4 = (ulong)(local_198[0] >> 1);
  pcVar6 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__nd

Opcode: CheatUnlockAllContentsResponse
Field: UnusedContentsUnlockKinds
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<ETzContentsUnlockKindType,DefaultKeyFuncs<ETzContentsUnlockKindType,false>,FDefaultSetAllocator>,void>
  ::Serialize((TSet *)(in_x0 + 0x10));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: RsaPublicKeyNotify
Field: PublicKeyXmlString
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize((JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
               *)(in_x0 + 8),(basic_string *)pcVar8);
  uVar4 = (ulong)(local_198[0] >> 1);
  pcVar8 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar4 = local_190;
    pcVar8 = local_188;
  }
  std::__ndk

Opcode: MarketGoodsDeletedNotify
Field: GoodsGuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<long_long,DefaultKeyFuncs<long_long,false>,FDefaultSetAllocator>,void>::
  Serialize((TSet *)(in_x0 + 8));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: ItemInfo
Field: IsStorable
Code:
lVar2 = 4;
  puVar4 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x21) == '\0') {
    lVar2 = 5;
    puVar4 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar4,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar9 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar9 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: ItemInfo
Field: IsLocked
Code:
lVar2 = 4;
  puVar4 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x40) == '\0') {
    lVar2 = 5;
    puVar4 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar11,puVar4,lVar2,0x17);
  pcVar11[lVar2] = '\0';
  uVar9 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar9 = local_190;
    pcVar11 = local_188;
  }
  std::__ndk1::__p

Opcode: ProtocolConstants
Field: TozNetwork.Protocol.ProtocolConstants
Code:


Opcode: PlayerCovenantWatchSynchronizeNotify
Field: CovenantGuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<long_long,DefaultKeyFuncs<long_long,false>,FDefaultSetAllocator>,void>::
  Serialize((TSet *)(in_x0 + 8));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: VersionCheckResult
Field: Code
Code:
auVar8 = Hello::to_string(*(VersionCheckResultCode *)(in_x0 + 8));
  TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize(auVar8._0_8_,auVar8._8_8_);
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar7 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar7 = local_188;
  }
  std::__ndk

Opcode: VersionCheckResult
Field: AdditionalData
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize((JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
               *)(in_x0 + 0x10),(basic_string *)pcVar7);
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar7 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar7 = local_188;
  }
  std::__ndk

Opcode: CombatLootOptionInfo
Field: IncludeBuffItem
Code:
lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0xc) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar11;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar12 = local_188;
  }
  std::__ndk1::__p

Opcode: CombatLootOptionInfo
Field: DefaultDisplayDropItemName
Code:
pcVar12 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0xf) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar11;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar12 = local_188;
  }
  std::__ndk1::__pu

Opcode: SkillAutoUseManaPointsRestrictOptionInfo
Field: IsForceUseSkillsInPvp
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 10) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar10;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: SkillAutoUseManaPointsRestrictOptionInfo
Field: IsForceUseSelfBuffSkills
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0xb) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: NameTagHealthBarDisplayOptionInfo
Field: IsDisplayModeAutoSelect
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 9) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar12,puVar3,lVar2,0x17);
  pcVar12[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar12 = local_188;
  }
  std::__ndk1::__p

Opcode: NameTagHealthBarDisplayOptionInfo
Field: IsAllNpcNamesDisplayed
Code:
pcVar12 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x61) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar12,puVar3,lVar2,0x17);
  pcVar12[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar7 = pcVar12;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar7 = local_188;
  }
  std::__ndk1::__put

Opcode: NameTagHealthBarDisplayOptionInfo
Field: IsDisplayedFissionStatusFriendlyOrBetter
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x62) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar12,puVar3,lVar2,0x17);
  pcVar12[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar12 = local_188;
  }
  std::__ndk1::__p

Opcode: ProtocolCheckRequest
Field: Hash
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize((JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
               *)(in_x0 + 8),(basic_string *)pcVar8);
  uVar4 = (ulong)(local_198[0] >> 1);
  pcVar8 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar4 = local_190;
    pcVar8 = local_188;
  }
  std::__ndk

Opcode: GameNotificationOptionInfo
Field: DistrictBossSpawnNotifyDisplayOption
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 9) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: GameNotificationOptionInfo
Field: ZonePointBossSpawnNotifyDisplayOption
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 10) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar1 = pcVar10;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar1 = local_188;
  }
  std::__ndk1::__put

Opcode: GracefulShutdownMessage
Field: TozNetwork.ServerGroup.GracefulShutdownMessage
Code:


Opcode: SchemaTable
Field: RegDate
Code:
TozSerializableMessageLibNative::JsonSerializer<TozSerializableMessageLibNative::DateTime,void>::
  Serialize((DateTime *)(in_x0 + 0x10));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar7 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar7 = local_188;
  }
  std::__n

Opcode: SchemaTable
Field: FileName
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize((JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
               *)(in_x0 + 0x20),(basic_string *)pcVar7);
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar7 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar7 = local_188;
  }
  std::__ndk

Opcode: SchemaTable
Field: TableName
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize((JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
               *)(in_x0 + 0x38),(basic_string *)pcVar7);
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar7 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar7 = local_188;
  }
  std::__ndk

Opcode: SchemaTable
Field: Columns
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::vector<std::__ndk1::unique_ptr<DatatoolReferenceNative::Packet::SchemaColumn,std::__ndk1::default_delete<DatatoolReferenceNative::Packet::SchemaColumn>>,toz::DefaultAllocator<std::__ndk1::unique_ptr<DatatoolReferenceNative::Packet::SchemaColumn,std::__ndk1::default_delete<DatatoolReferenceNative::Packet::SchemaColumn>>>>,void>
  ::Serialize((vector *)(in_x0 + 0x50));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar7 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar7 = local_188;
  }
  std::__nd

Opcode: SessionKeyAuthenticate
Field: SessionKey
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize((JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
               *)(in_x0 + 8),(basic_string *)pcVar7);
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar7 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar7 = local_188;
  }
  std::__ndk

Opcode: RealmAccountInfo
Field: PlayedCutSceneCuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<FTzCuid,DefaultKeyFuncs<FTzCuid,false>,FDefaultSetAllocator>,void>::Serialize
            ((TSet *)(in_x0 + 0x48));
  uVar1 = local_198 >> 1 & 0x7f;
  pcVar3 = (char *)((ulong)&local_198 | 1);
  if ((local_198 & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: LZ4CompressHandshakeResult
Field: __base__
Code:


Opcode: LZ4CompressHandshakeResult
Field: TozLZ4.Handshake.LZ4CompressHandshakeResult
Code:


Opcode: CovenantTradeSalesManageRequest
Field: GoodsGuidWithItemCuidInfos
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<TSharedPtr<FTzCovenantTradeGoodsGuidWithItemCuidInfo,(ESPMode)1>,DefaultKeyFuncs<TSharedPtr<FTzCovenantTradeGoodsGuidWithItemCuidInfo,(ESPMode)1>,false>,FDefaultSetAllocator>,void>
  ::Serialize((TSet *)(in_x0 + 0x10));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar8 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar8 = local_188;
  }
  std::__nd

Opcode: ErTozMessage
Field: __base__
Code:


Opcode: ProtocolCheckHandshakeResult
Field: ClientHash
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize((JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
               *)(in_x0 + 0x10),(basic_string *)pcVar7);
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar7 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar7 = local_188;
  }
  std::__ndk

Opcode: PlayerRealmTransferCheckInfo
Field: IsMarketCheckNeeded
Code:
pcVar9 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x19) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar8;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar9,puVar2,lVar1,0x17);
  pcVar9[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  pcVar5 = pcVar9;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar5 = local_188;
  }
  std::__ndk1::__put

Opcode: PlayerRealmTransferCheckInfo
Field: HasReceivableAttachmentsMail
Code:
lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x1a) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar8;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar9,puVar2,lVar1,0x17);
  pcVar9[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar9 = local_188;
  }
  std::__ndk1::__p

Opcode: TozTcpWelcome
Field: EngineData
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::vector<unsigned_char,toz::DefaultAllocator<unsigned_char>>,void>::
  Serialize((vector *)(in_x0 + 8));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: TozTcpWelcome
Field: UserData
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::vector<unsigned_char,toz::DefaultAllocator<unsigned_char>>,void>::
  Serialize((vector *)(in_x0 + 0x20));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: VersionNameInfo
Field: ProjectName
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize((JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
               *)(in_x0 + 0x20),(basic_string *)pcVar7);
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar7 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar7 = local_188;
  }
  std::__ndk

Opcode: VersionNameInfo
Field: BranchName
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize((JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
               *)(in_x0 + 0x38),(basic_string *)pcVar7);
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar7 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar7 = local_188;
  }
  std::__ndk

Opcode: VersionNameInfo
Field: LastToken
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize((JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
               *)(in_x0 + 0x50),(basic_string *)pcVar7);
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar7 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar7 = local_188;
  }
  std::__ndk

Opcode: SerializedMessageCacheElement
Field: message
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::vector<unsigned_char,toz::DefaultAllocator<unsigned_char>>,void>::
  Serialize((vector *)(in_x0 + 0x10));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: XorHandshake
Field: xorStaticKey
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::vector<unsigned_char,toz::DefaultAllocator<unsigned_char>>,void>::
  Serialize((vector *)(in_x0 + 8));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar7 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar7 = local_188;
  }
  std::__nd

Opcode: XorHandshake
Field: PublicKeyXmlString
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize((JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
               *)(in_x0 + 0x20),(basic_string *)pcVar7);
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar7 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar7 = local_188;
  }
  std::__ndk

Opcode: XorHandshake
Field: Type
Code:
auVar8 = XorEncryptor::to_string(*(XorHandshakeMessageType *)(in_x0 + 0x38));
  TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize(auVar8._0_8_,auVar8._8_8_);
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar7 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar7 = local_188;
  }
  std::__ndk

Opcode: ItemBoundAndErodedSelector
Field: IsStorable
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x19) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar9 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar10;
  if ((local_198 & 1) != 0) {
    uVar9 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: ItemBoundAndErodedSelector
Field: IsEroded
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x1a) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar9 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar9 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: MarketGoodsExpireDateTimeUpdateNotify
Field: GoodsGuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<long_long,DefaultKeyFuncs<long_long,false>,FDefaultSetAllocator>,void>::
  Serialize((TSet *)(in_x0 + 8));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar8 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar8 = local_188;
  }
  std::__nd

Opcode: BattalionCovenantDiplomacyNotify
Field: AllianceCovenantGuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<long_long,DefaultKeyFuncs<long_long,false>,FDefaultSetAllocator>,void>::
  Serialize((TSet *)(in_x0 + 8));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: SchemaDataInfo
Field: SchemaDataTables
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::vector<std::__ndk1::unique_ptr<DatatoolReferenceNative::Packet::SchemaDataTable,std::__ndk1::default_delete<DatatoolReferenceNative::Packet::SchemaDataTable>>,toz::DefaultAllocator<std::__ndk1::unique_ptr<DatatoolReferenceNative::Packet::SchemaDataTable,std::__ndk1::default_delete<DatatoolReferenceNative::Packet::SchemaDataTable>>>>,void>
  ::Serialize((vector *)(in_x0 + 0x20));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: BaseInfo
Field: Token
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize((JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
               *)(in_x0 + 8),(basic_string *)pcVar8);
  uVar4 = (ulong)(local_198[0] >> 1);
  pcVar8 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar4 = local_190;
    pcVar8 = local_188;
  }
  std::__ndk

Opcode: DatatoolHandshakeRequest
Field: DataHeaders
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::vector<std::__ndk1::unique_ptr<DatatoolReferenceNative::Packet::DataHeader,std::__ndk1::default_delete<DatatoolReferenceNative::Packet::DataHeader>>,toz::DefaultAllocator<std::__ndk1::unique_ptr<DatatoolReferenceNative::Packet::DataHeader,std::__ndk1::default_delete<DatatoolReferenceNative::Packet::DataHeader>>>>,void>
  ::Serialize((vector *)(in_x0 + 8));
  uVar4 = (ulong)(local_198[0] >> 1);
  pcVar6 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__nd

Opcode: ErServerAuthenticateInfo
Field: __base__
Code:


Opcode: CombatTargetOptionInfo
Field: KeepContinuousCombatAndAutoMoveOnManualMove
Code:
pcVar12 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0xd) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar11;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar12;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: CombatTargetOptionInfo
Field: KeepAutoAttackOnMoveToLocation
Code:
lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0xe) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar11;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar12 = local_188;
  }
  std::__ndk1::__p

Opcode: CombatTargetOptionInfo
Field: KeepAutoAttackOnMoveToDirection
Code:
pcVar12 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0xf) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar11;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar12;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: CombatTargetOptionInfo
Field: AutoCounterAttackNpc
Code:
pcVar12 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x20) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar11;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar12;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: CombatTargetOptionInfo
Field: CancelAttackOrFocusTargetButtonVisible
Code:
pcVar12 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x38) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar11;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar12 = local_188;
  }
  std::__ndk1::__pu

Opcode: CombatTargetOptionInfo
Field: RemoveTargetingByContinuousCombatOff
Code:
pcVar12 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x3a) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar11;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar12 = local_188;
  }
  std::__ndk1::__pu

Opcode: CombatTargetOptionInfo
Field: FocusTargetSelfButtonVisible
Code:
pcVar12 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x3c) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar11;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar12;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: CombatTargetOptionInfo
Field: IsReservedSkillCancellable
Code:
lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x3d) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar11;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar12 = local_188;
  }
  std::__ndk1::__p

Opcode: CombatTargetOptionInfo
Field: StopContinuousCombatWhenKilledBoss
Code:
pcVar12 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x3e) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar11;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar12,puVar2,lVar1,0x17);
  pcVar12[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar12 = local_188;
  }
  std::__ndk1::__pu

Opcode: ItemIndex
Field: IsStorable
Code:
pcVar11 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x19) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar9;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar11,puVar2,lVar1,0x17);
  pcVar11[lVar1] = '\0';
  uVar10 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar11;
  if ((local_198 & 1) != 0) {
    uVar10 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: ItemIndex
Field: IsEroded
Code:
lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x1a) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar9;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar11,puVar2,lVar1,0x17);
  pcVar11[lVar1] = '\0';
  uVar10 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar10 = local_190;
    pcVar11 = local_188;
  }
  std::__ndk1::__p

Opcode: InfoAuthenticateComplete
Field: SessionKey
Code:
TozSerializableMessageLibNative::
  JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
  ::Serialize((JsonSerializer<std::__ndk1::basic_string<char,std::__ndk1::char_traits<char>,toz::DefaultAllocator<char>>,void>
               *)(in_x0 + 0x10),(basic_string *)pcVar9);
  uVar10 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar10 = local_190;
    pcVar11 = local_188;
  }
  std::__nd

Opcode: GearEnhancementResultInfo
Field: IsConfirmedEnhancement
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x2c) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: GearEnhancementResultInfo
Field: IsEroded
Code:
pcVar9 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x2d) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar9,puVar3,lVar2,0x17);
  pcVar9[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar9 = local_188;
  }
  std::__ndk1::__pu

Opcode: GearEnhancementResultInfo
Field: IsDestroyed
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x60) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: MarketSellSettleRequest
Field: GoodsGuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<long_long,DefaultKeyFuncs<long_long,false>,FDefaultSetAllocator>,void>::
  Serialize((TSet *)(in_x0 + 8));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: PlayerCovenantInfo
Field: JoinAppliedCovenantGuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<long_long,DefaultKeyFuncs<long_long,false>,FDefaultSetAllocator>,void>::
  Serialize((TSet *)(in_x0 + 0x58));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: CashShopWindowDressingInfo
Field: IsHideAfterBuyCompleted
Code:
pcVar11 = (char *)((ulong)&local_198 | 1);
  lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x7c) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar11,puVar2,lVar1,0x17);
  pcVar11[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar11;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: CashShopWindowDressingInfo
Field: IsHideMerchandise
Code:
lVar1 = 4;
  puVar2 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x7d) == '\0') {
    lVar1 = 5;
    puVar2 = (undefined8 *)pcVar10;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar1 << 1);
  __memcpy_chk(pcVar11,puVar2,lVar1,0x17);
  pcVar11[lVar1] = '\0';
  uVar3 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar3 = local_190;
    pcVar11 = local_188;
  }
  std::__ndk1::__p

Opcode: PlayerInitializeInfo
Field: ActivatedCollectionCategoryCuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<FTzCuid,DefaultKeyFuncs<FTzCuid,false>,FDefaultSetAllocator>,void>::Serialize
            ((TSet *)(in_x0 + 0x428));
  uVar11 = local_198 >> 1 & 0x7f;
  pcVar9 = (char *)((ulong)&local_198 | 1);
  if ((local_198 & 1) != 0) {
    uVar11 = local_190;
    pcVar9 = local_188;
  }
  std::__nd

Opcode: PlayerInitializeInfo
Field: DiscoveredSelfieDoodadSpawnerCuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<FTzCuid,DefaultKeyFuncs<FTzCuid,false>,FDefaultSetAllocator>,void>::Serialize
            ((TSet *)(in_x0 + 0x538));
  uVar11 = local_198 >> 1 & 0x7f;
  pcVar9 = (char *)((ulong)&local_198 | 1);
  if ((local_198 & 1) != 0) {
    uVar11 = local_190;
    pcVar9 = local_188;
  }
  std::__nd

Opcode: PlayerInitializeInfo
Field: RegisteredFavoriteAdjustableStatKinds
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<ETzAdjustableStatKindType,DefaultKeyFuncs<ETzAdjustableStatKindType,false>,FDefaultSetAllocator>,void>
  ::Serialize((TSet *)(in_x0 + 0x840));
  uVar11 = local_198 >> 1 & 0x7f;
  pcVar9 = (char *)((ulong)&local_198 | 1);
  if ((local_198 & 1) != 0) {
    uVar11 = local_190;
    pcVar9 = local_188;
  }
  std::__nd

Opcode: PlayerInitializeInfo
Field: FavoriteCollectionCuids
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<FTzCuid,DefaultKeyFuncs<FTzCuid,false>,FDefaultSetAllocator>,void>::Serialize
            ((TSet *)(in_x0 + 0x8c0));
  uVar11 = local_198 >> 1 & 0x7f;
  pcVar9 = (char *)((ulong)&local_198 | 1);
  if ((local_198 & 1) != 0) {
    uVar11 = local_190;
    pcVar9 = local_188;
  }
  std::__nd

Opcode: GearErodedRestorationResultInfo
Field: IsBound
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x11) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar10;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: GearErodedRestorationResultInfo
Field: IsStorable
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x12) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: AnniversaryAchievementPointInfo
Field: RewardedGoalPoints
Code:
TozSerializableMessageLibNative::
  JsonSerializer<TSet<int,DefaultKeyFuncs<int,false>,FDefaultSetAllocator>,void>::Serialize
            ((TSet *)(in_x0 + 0x28));
  uVar1 = (ulong)(local_198[0] >> 1);
  pcVar3 = (char *)((ulong)local_198 | 1);
  if ((local_198[0] & 1) != 0) {
    uVar1 = local_190;
    pcVar3 = local_188;
  }
  std::__nd

Opcode: StrongholdBattleAttackDeclareInfo
Field: IsVolunteerJoinApplicationAutomaticApproval
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x49) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar6 = pcVar10;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar6 = local_188;
  }
  std::__ndk1::__put

Opcode: StrongholdBattleAttackDeclareInfo
Field: IsNotExposeToBattalionList
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x4a) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: StrongholdBattleAttackDeclareInfo
Field: IsDeclarePlunder
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x4b) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__pu

Opcode: DisplayOptionInfo
Field: IsAllianceCovenantVisibleInMiniMap
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 9) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__p

Opcode: DisplayOptionInfo
Field: ItemAcquireNotifyAnonymityOption
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 10) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar10 = local_188;
  }
  std::__ndk1::__pu

Opcode: DisplayOptionInfo
Field: IsOccupiedStrongholdVisibleInChat
Code:
lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x20) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar11,puVar3,lVar2,0x17);
  pcVar11[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar11 = local_188;
  }
  std::__ndk1::__p

Opcode: DisplayOptionInfo
Field: IsLivingTotemIconEmphasized
Code:
pcVar10 = (char *)((ulong)&local_198 | 1);
  lVar2 = 4;
  puVar3 = &DAT_0901b5c8;
  if (*(char *)(in_x0 + 0x21) == '\0') {
    lVar2 = 5;
    puVar3 = (undefined8 *)pcVar1;
  }
  local_190 = 0;
  local_188 = (char *)0x0;
  local_198 = (ulong)(byte)((int)lVar2 << 1);
  __memcpy_chk(pcVar10,puVar3,lVar2,0x17);
  pcVar10[lVar2] = '\0';
  uVar4 = local_198 >> 1 & 0x7f;
  pcVar1 = pcVar10;
  if ((local_198 & 1) != 0) {
    uVar4 = local_190;
    pcVar1 = local_188;
  }
  std::__ndk1::__put